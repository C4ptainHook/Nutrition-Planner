@page "/Register"

@using System.ComponentModel.DataAnnotations
@using AuthService.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Register</h3>


<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Input" OnValidSubmit="HandleRegisterAsync" FormName="registerForm">
            <DataAnnotationsValidator />
            <h4>Use a local account to log in.</h4>
            <hr />
            <ValidationSummary class="text-danger" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" />
                <ValidationMessage For="@(() => Input.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="Input.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => Input.Password)" />
            </div>
            <div class="form-group">
                <label>Confirm Password</label>
                <InputText @bind-Value="Input.ConfirmPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => Input.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    private InputModel Input { get; set; } = new();
    private string? errorMessage;
    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    private async Task HandleRegisterAsync()
    {
        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, "user");
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }
}